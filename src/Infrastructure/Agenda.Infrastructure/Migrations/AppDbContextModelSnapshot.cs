// <auto-generated />
using System;
using Agenda.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Agenda.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Agenda.Domain.Entities.Activity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("ActualCancellationDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("data_cancelamento_real");

                    b.Property<DateTimeOffset?>("ActualCompletionDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("data_conclusao_real");

                    b.Property<DateTimeOffset?>("ActualStartDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("data_inicio_real");

                    b.Property<DateTimeOffset?>("ChangedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("data_atualizacao");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("data_criacao");

                    b.Property<TimeSpan?>("DelayDuration")
                        .HasColumnType("time")
                        .HasColumnName("duracao_atraso");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("descricao");

                    b.Property<DateTimeOffset?>("DueDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("data_vencimento");

                    b.Property<TimeSpan?>("ElapsedSinceCreation")
                        .HasColumnType("time")
                        .HasColumnName("decorrido_desde_criaçao");

                    b.Property<TimeSpan?>("FinalWorkedTime")
                        .HasColumnType("time")
                        .HasColumnName("tempo_ativo_total");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("ativo");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("prioridade");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status_atividade");

                    b.Property<TimeSpan?>("TimeToStart")
                        .HasColumnType("time")
                        .HasColumnName("tempo_ate_inicio");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("titulo");

                    b.HasKey("Id");

                    b.ToTable("atividade", (string)null);
                });

            modelBuilder.Entity("Agenda.Domain.Entities.Activity", b =>
                {
                    b.OwnsMany("Agenda.Domain.Entities.ActivityTimeLog", "TimeLogs", b1 =>
                        {
                            b1.Property<long>("atividade_Id")
                                .HasColumnType("bigint");

                            b1.Property<DateTimeOffset>("StartTime")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("inicio");

                            b1.Property<DateTimeOffset?>("EndTime")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("fim");

                            b1.HasKey("atividade_Id", "StartTime");

                            b1.ToTable("atividade_logs_tempo", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("atividade_Id");
                        });

                    b.Navigation("TimeLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
